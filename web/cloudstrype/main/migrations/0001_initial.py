# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-27 01:34
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(max_length=64)),
                ('first_name', models.CharField(editable=False, max_length=64)),
                ('last_name', models.CharField(editable=False, max_length=64)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('md5', models.CharField(max_length=32)),
            ],
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChunkService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attrs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('chunk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service', to='main.Chunk')),
            ],
        ),
        migrations.CreateModel(
            name='Directory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('display_name', models.CharField(max_length=45)),
                ('display_path', models.TextField()),
                ('parents', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=45), size=None)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('attrs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('search', django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dirs', to='main.Directory')),
            ],
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DirectoryShare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_to', to='main.Directory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_directories', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('size', models.IntegerField(default=0)),
                ('md5', models.CharField(max_length=32)),
                ('sha1', models.CharField(max_length=40)),
                ('mime', models.CharField(max_length=64)),
                ('raid_level', models.SmallIntegerField(default=1)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('attrs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('search', django.contrib.postgres.search.SearchVectorField(blank=True, editable=False, null=True)),
                ('directory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='main.Directory')),
            ],
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FileChunk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.IntegerField(default=0)),
                ('chunk', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Chunk')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.File')),
            ],
        ),
        migrations.CreateModel(
            name='FileShare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_to', to='main.File')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_files', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FileStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reads', models.IntegerField()),
                ('last', models.DateTimeField(auto_now=True)),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='main.File')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raid_level', models.SmallIntegerField(default=1)),
                ('raid_replicas', models.SmallIntegerField(default=1)),
                ('attrs', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='options', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.SmallIntegerField(choices=[(1, 'Dropbox'), (2, 'Onedrive'), (3, 'Box'), (4, 'Google Drive'), (5, 'Array')])),
            ],
            options={
                'verbose_name': 'Service Provider',
                'verbose_name_plural': 'Service Providers',
            },
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='UserService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.BigIntegerField(default=0)),
                ('used', models.BigIntegerField(default=0)),
                ('attrs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            bases=(main.models.UidModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ArrayNode',
            fields=[
                ('userservice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.UserService')),
                ('name', models.UUIDField()),
            ],
            bases=('main.userservice',),
        ),
        migrations.CreateModel(
            name='ArrayProvider',
            fields=[
                ('serviceprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.ServiceProvider')),
            ],
            bases=('main.serviceprovider',),
        ),
        migrations.CreateModel(
            name='OAuth2AccessToken',
            fields=[
                ('userservice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.UserService')),
                ('provider_uid', models.CharField(editable=False, max_length=255)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField(null=True)),
                ('expires', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name': 'OAuth2 Access Token',
                'verbose_name_plural': 'OAuth2 Access Tokens',
            },
            bases=('main.userservice',),
        ),
        migrations.CreateModel(
            name='OAuth2Provider',
            fields=[
                ('serviceprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.ServiceProvider')),
                ('client_id', models.TextField()),
                ('client_secret', models.TextField()),
            ],
            bases=('main.serviceprovider',),
        ),
        migrations.AddField(
            model_name='userservice',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ServiceProvider'),
        ),
        migrations.AddField(
            model_name='userservice',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='file',
            name='tags',
            field=models.ManyToManyField(to='main.Tag'),
        ),
        migrations.AddField(
            model_name='file',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='directory',
            name='tags',
            field=models.ManyToManyField(to='main.Tag'),
        ),
        migrations.AddField(
            model_name='directory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chunkservice',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='main.UserService'),
        ),
        migrations.AddField(
            model_name='chunk',
            name='file',
            field=models.ManyToManyField(related_name='chunks', through='main.FileChunk', to='main.File'),
        ),
        migrations.AlterUniqueTogether(
            name='fileshare',
            unique_together=set([('file', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='filechunk',
            unique_together=set([('file', 'serial')]),
        ),
        migrations.AlterUniqueTogether(
            name='file',
            unique_together=set([('directory', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='directoryshare',
            unique_together=set([('directory', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='directory',
            unique_together=set([('user', 'name', 'parents')]),
        ),
        migrations.AlterUniqueTogether(
            name='chunkservice',
            unique_together=set([('chunk', 'service')]),
        ),
    ]
